
Robocik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000348  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c76  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cf  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e7  00000000  00000000  00001fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028d  00000000  00000000  0000249f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a3 30       	cpi	r26, 0x03	; 3
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  d4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_1>:

uint8_t L = 0;
uint8_t R = 0;
uint8_t tmp = 0;

ISR(INT0_vect){  //Zdefiniowanie przerwania
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
	tmp = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	PORTB=PORTB | 0b00000001;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	90 e3       	ldi	r25, 0x30	; 48
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_1+0x22>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_1+0x2c>
 108:	00 00       	nop
	_delay_ms(2000);
	PORTB=PORTB & 0b11111110;
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	85 b9       	out	0x05, r24	; 5
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	2f 91       	pop	r18
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <RotateLeft>:

//Obrót serwa w lewo
void RotateLeft(){
	OCR1A = 1499;                                             //Zmiana wype³nienia PWM (Obrót serwa)
 120:	8b ed       	ldi	r24, 0xDB	; 219
 122:	95 e0       	ldi	r25, 0x05	; 5
 124:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 128:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 12c:	78 94       	sei
	PORTD=PORTD | 0b00010000;                                 //Symulacja i sygnalizowanie badania odleg³oœci
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 61       	ori	r24, 0x10	; 16
 132:	8b b9       	out	0x0b, r24	; 11
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ed       	ldi	r24, 0xD3	; 211
 138:	90 e3       	ldi	r25, 0x30	; 48
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <RotateLeft+0x1a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <RotateLeft+0x24>
 144:	00 00       	nop
	_delay_ms(2000);
	PORTD=PORTD & 0b11101111;
 146:	8b b1       	in	r24, 0x0b	; 11
 148:	8f 7e       	andi	r24, 0xEF	; 239
 14a:	8b b9       	out	0x0b, r24	; 11
	cli();
 14c:	f8 94       	cli
	L = tmp;
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <L>
	tmp = 0;
 156:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 15a:	08 95       	ret

0000015c <RotateRight>:
}

//Obrót serwa w prawo
void RotateRight(){
	OCR1A = 4499;                                             //Zmiana wype³nienia PWM (Obrót serwa)
 15c:	83 e9       	ldi	r24, 0x93	; 147
 15e:	91 e1       	ldi	r25, 0x11	; 17
 160:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 164:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	sei();
 168:	78 94       	sei
	PORTD=PORTD | 0b00001000;                                 //Symulacja i sygnalizowanie badania odleg³oœci.
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	88 60       	ori	r24, 0x08	; 8
 16e:	8b b9       	out	0x0b, r24	; 11
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	83 ed       	ldi	r24, 0xD3	; 211
 174:	90 e3       	ldi	r25, 0x30	; 48
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <RotateRight+0x1a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <RotateRight+0x24>
 180:	00 00       	nop
	_delay_ms(2000);
	PORTD=PORTD & 0b11110111;
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	8b b9       	out	0x0b, r24	; 11
	cli();
 188:	f8 94       	cli
	R = tmp;
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <R>
	tmp = 0;
 192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	08 95       	ret

00000198 <RotateFront>:
}

//Obrót serwa na wprost
void RotateFront(){
	OCR1A = 2999; //Zmiana wype³nienia PWM 
 198:	87 eb       	ldi	r24, 0xB7	; 183
 19a:	9b e0       	ldi	r25, 0x0B	; 11
 19c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1a4:	08 95       	ret

000001a6 <TurnLeft>:
}

//Obrót w lewo
void TurnLeft(){
	PORTD=PORTD | 0b00010000; //Sygnalizacja obrotu
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | 0b00101000; //Obrót
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	88 62       	ori	r24, 0x28	; 40
 1b0:	85 b9       	out	0x05, r24	; 5
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	8e e9       	ldi	r24, 0x9E	; 158
 1b6:	94 e2       	ldi	r25, 0x24	; 36
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <TurnLeft+0x12>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <TurnLeft+0x1c>
 1c2:	00 00       	nop
	_delay_ms(1500);
	PORTB = PORTB & 0b11000011; //Zatrzymanie silników
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	83 7c       	andi	r24, 0xC3	; 195
 1c8:	85 b9       	out	0x05, r24	; 5
	PORTD=PORTD & 0b11101111;
 1ca:	8b b1       	in	r24, 0x0b	; 11
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	8b b9       	out	0x0b, r24	; 11
 1d0:	08 95       	ret

000001d2 <TurnRight>:
}

//Obrót w prawo
void TurnRight(){
	PORTD=PORTD | 0b00001000; //Sygnalizacja obrotu
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | 0b00010100; //Obrót
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	84 61       	ori	r24, 0x14	; 20
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	8e e9       	ldi	r24, 0x9E	; 158
 1e2:	94 e2       	ldi	r25, 0x24	; 36
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <TurnRight+0x12>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <TurnRight+0x1c>
 1ee:	00 00       	nop
	_delay_ms(1500);
	PORTB = PORTB & 0b11000011; //Zatrzymanie silników
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	83 7c       	andi	r24, 0xC3	; 195
 1f4:	85 b9       	out	0x05, r24	; 5
	PORTD=PORTD & 0b11110111;
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	87 7f       	andi	r24, 0xF7	; 247
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	08 95       	ret

000001fe <TurnBack>:
}

//Zawracanie
void TurnBack(){
	PORTD=PORTD | 0b00011000; //Sygnalizacja obrotu
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	88 61       	ori	r24, 0x18	; 24
 202:	8b b9       	out	0x0b, r24	; 11
	PORTB = PORTB | 0b00010100; //Obrót
 204:	85 b1       	in	r24, 0x05	; 5
 206:	84 61       	ori	r24, 0x14	; 20
 208:	85 b9       	out	0x05, r24	; 5
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	8d e3       	ldi	r24, 0x3D	; 61
 20e:	99 e4       	ldi	r25, 0x49	; 73
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <TurnBack+0x12>
 218:	00 c0       	rjmp	.+0      	; 0x21a <TurnBack+0x1c>
 21a:	00 00       	nop
	_delay_ms(3000);
	PORTB = PORTB & 0b11000011; //Zatrzymanie silników
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	83 7c       	andi	r24, 0xC3	; 195
 220:	85 b9       	out	0x05, r24	; 5
	PORTD=PORTD & 0b11100111;
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	87 7e       	andi	r24, 0xE7	; 231
 226:	8b b9       	out	0x0b, r24	; 11
 228:	08 95       	ret

0000022a <main>:
}

int main(void) {
	uint8_t temp;
	temp = EICRA;
 22a:	e9 e6       	ldi	r30, 0x69	; 105
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
	EICRA = temp | (1<<ISC01|0<<ISC00);
 230:	82 60       	ori	r24, 0x02	; 2
 232:	80 83       	st	Z, r24
	temp = EIMSK;
 234:	8d b3       	in	r24, 0x1d	; 29
	EIMSK = temp | (1<<INT0);
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8d bb       	out	0x1d, r24	; 29
	DDRD = 0b00011000;
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	8a b9       	out	0x0a, r24	; 10
    DDRB = 0b00111110;
 23e:	8e e3       	ldi	r24, 0x3E	; 62
 240:	84 b9       	out	0x04, r24	; 4
	cli();
 242:	f8 94       	cli
	
	temp = TCCR1A;
 244:	e0 e8       	ldi	r30, 0x80	; 128
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
	TCCR1A = temp | (1<<COM1A1 | 0<<COM1A0 | 1<<WGM11 | 0<<WGM10); //Ustawienie nieodwracajacego wyjscia PWM i trybu PWM w liczniku Timer1
 24a:	82 68       	ori	r24, 0x82	; 130
 24c:	80 83       	st	Z, r24
	temp = TCCR1B;
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
	TCCR1B = temp | (1<<WGM12 | 1<<WGM13 | 0<<CS12 | 1<<CS11 | 0<<CS10); //Ustawienie prescalera
 254:	8a 61       	ori	r24, 0x1A	; 26
 256:	80 83       	st	Z, r24
	ICR1 = 39999;
 258:	8f e3       	ldi	r24, 0x3F	; 63
 25a:	9c e9       	ldi	r25, 0x9C	; 156
 25c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 260:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 2999;
 264:	87 eb       	ldi	r24, 0xB7	; 183
 266:	9b e0       	ldi	r25, 0x0B	; 11
 268:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 26c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	
	
	while (1) {
		PORTB = PORTB | 0b00100100;                              //Jazda na wprost
 270:	85 b1       	in	r24, 0x05	; 5
 272:	84 62       	ori	r24, 0x24	; 36
 274:	85 b9       	out	0x05, r24	; 5
		if (PIND & 0b00000100) {                                  //Detekcja przeszkody z przodu. PIND2
 276:	4a 9b       	sbis	0x09, 2	; 9
 278:	fb cf       	rjmp	.-10     	; 0x270 <main+0x46>
			PORTB = PORTB & 0b11000011;                          //Zatrzymanie
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	83 7c       	andi	r24, 0xC3	; 195
 27e:	85 b9       	out	0x05, r24	; 5
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	84 e3       	ldi	r24, 0x34	; 52
 284:	9c e0       	ldi	r25, 0x0C	; 12
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x5c>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x66>
 290:	00 00       	nop
			_delay_ms(500);
			temp=EIFR;
 292:	8c b3       	in	r24, 0x1c	; 28
			EIFR=temp|(1<<INTF0);                                //kasowanie przerwania
 294:	81 60       	ori	r24, 0x01	; 1
 296:	8c bb       	out	0x1c, r24	; 28
			
			RotateLeft();				                         //Badanie terenu	
 298:	0e 94 90 00 	call	0x120	; 0x120 <RotateLeft>
			RotateRight();
 29c:	0e 94 ae 00 	call	0x15c	; 0x15c <RotateRight>
			RotateFront();
 2a0:	0e 94 cc 00 	call	0x198	; 0x198 <RotateFront>
			if (L^R) {				                             //Podjêcie decyzji o kierunku jazdy (Domyœlnie w lewo)
 2a4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <L>
 2a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <R>
 2ac:	89 17       	cp	r24, r25
 2ae:	41 f0       	breq	.+16     	; 0x2c0 <main+0x96>
				if (L) {
 2b0:	88 23       	and	r24, r24
 2b2:	19 f0       	breq	.+6      	; 0x2ba <main+0x90>
					TurnLeft();
 2b4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TurnLeft>
 2b8:	db cf       	rjmp	.-74     	; 0x270 <main+0x46>
				}
				else {
					TurnRight();
 2ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TurnRight>
 2be:	d8 cf       	rjmp	.-80     	; 0x270 <main+0x46>
				}
			}
			else if (L&R) {
 2c0:	89 23       	and	r24, r25
 2c2:	19 f0       	breq	.+6      	; 0x2ca <main+0xa0>
				TurnBack();
 2c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <TurnBack>
 2c8:	d3 cf       	rjmp	.-90     	; 0x270 <main+0x46>
			}
			else {
				TurnLeft();
 2ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TurnLeft>
 2ce:	d0 cf       	rjmp	.-96     	; 0x270 <main+0x46>

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
